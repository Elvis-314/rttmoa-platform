! https://nest.nodejs.cn/ 以Nest.js作为参考， Koajs和Eggjs都是相同的内容，不过写法不同而已
! http://localhost:3000/graphql
! Nest.js社区：https://github.com/nestjs/awesome-nestjs?tab=readme-ov-file#examples

文档中：  
  * Typescript 装饰器
 
  概述 - 控制器 - 控制器负责处理传入的请求并将响应发送回客户端。 @Controller()
  概述 - 提供器 - 【核心概念】许多基本的 Nest 类，例如服务、存储库、工厂和助手，都可以被视为提供者。  @providers()
  概述 - 模块 - 模块是一个用 @Module() 装饰器注释的类。
  
  *基础知识
  技术 - Cookie、Session、Jwt-token
  技术 - 配置 - 应用通常运行在不同的环境中。    |     .env、自定义环境文件路径、自定义配置文件、配置命名空间、自定义验证函数
  技术 - 数据库 - 可以轻松地与任何SQL或NoSQL数据库集成：TypeORM集成。   【typeorm、mysql2   需测试】
  技术 - Mongo - 支持两种与MongoDB数据库集成的方法：TypeORM、Mongoose。 【create、findAll   已测试】
  技术 - 验证 - 验证所有传入的客户端有效负载执行验证规则     |     ValidationPipe & 'class-validator'
  技术 - 缓存 - 它允许更快地访问常用数据，从而减少重复获取或计算相同信息的需要。   |   内存缓存 & 全局模块缓存 & websocket缓存 & 替代缓存redis
  技术 - 任务调度 - 任务调度允许你安排任意代码在固定日期/时间、重复间隔或在指定间隔后执行一次。    【Cron定时任务 & 每秒、每分、每时、每天】
  技术 - 队列 - 队列可以解决：  平滑处理峰值。 &  分解可能会阻塞Node事件循环的单一任务。 &  提供跨各种服务的可靠通信渠道。     【需测试】
  技术 - 日志 - Nest 带有一个内置的基于文本的日志器、系统日志记录。         【Logger & 将日志记录到文本当中】 
  技术 - Cookies - HTTP cookie 是用户浏览器存储的一小段数据。             【auth模块测试Cookie】    
  技术 - 上传文件 - 为了处理文件上传，Nest为Express提供了multer模块         【需测试上传文件】
  技术 - Http模块 - Axios包                                                             
  技术 - Session - HTTP会话提供了一种跨多个请求存储有关用户的信息的方法  【auth模块测试Session】
  技术 - 其他 - 序列化、版本控制、事件、压缩、流式文件、模型-视图-控制器、性能、服务器发送的事件
  
  安全 - 身份验证 - 客户端将首先使用用户名和密码进行身份验证。一旦通过身份验证，服务器将发送一个 JWT，该 JWT 可以在后续请求的授权标头中作为 不记名令牌 发送以证明身份验证。
  安全 - 身份验证 - 通行证整合#  通行证 是最流行的 node.js 身份验证库，在社区中广为人知。使用 @nestjs/passport 模块将该库与 Nest 应用集成起来非常简单。
  安全 - 授权 - 授权是指确定用户能够做什么的过程。例如，允许管理用户创建、编辑和删除帖子。非管理员用户仅被授权阅读帖子。  |||   Role： User/Admin
  安全 - 加密与散列 - 加密是对信息进行编码的过程。此过程将信息的原始表示形式（称为明文）转换为称为密文的替代形式。  |||  crypto模块进行加密与解密
  安全 - Helmet - Helmet 可以通过适当设置 HTTP 标头来帮助保护你的应用免受一些众所周知的 Web 漏洞的侵害。  |||   app.use(helmet())  /  await app.register()
  安全 - CORS - 跨源资源共享 (CORS) 是一种允许从另一个域请求资源的机制。      app.enableCors()
  安全 - CSRF - 跨站点请求伪造 (CSRF 或 XSRF) 是一种攻击类型，其中未经授权的命令从受信任的用户发送到 Web 应用。
  安全 - 限速 - 保护应用免受暴力攻击的常用技术是限速。

  * GraphQL
  GraphQL - 快速开始 - GraphQL也是使用现有数据完成这些查询的运行时    ||    GraphQL使用：GraphQL配置  &  /graphql接口
  GraphQL - 解析器 - 解析器提供将 GraphQL 操作（查询、变更或订阅）转换为数据的说明。
 

  网络套接字 - 网关 - WebSocket：【 例如依赖注入、装饰器、异常过滤器、管道、守卫和拦截器，同样适用于网关。】
  网络套接字 - 适配器 - 你的技术要求需要能够跨 Web 服务的多个负载平衡实例广播事件。为此，你可以扩展 IoAdapter 并覆盖一个方法，该方法负责实例化新的 socket.io 服务器。

  * 微服务
  微服务 - 概述 - Nest 还原生支持微服务架构风格的开发。例如依赖注入、装饰器、异常过滤器、管道、守卫和拦截器  &&   Redis、Mqtt、RabbitMQ、gRPC
  微服务 - Redis - 1
  微服务 - Mqtt - 1
  微服务 - NATS - 1
  微服务 - RabbitMQ - 1
   
  * 部署 - 部署 - 当你准备将 NestJS 应用部署到生产环境时，你可以采取一些关键步骤来确保它尽可能高效地运行。  构建 & 生产 & 日志 & 其他提示 & Docker & Mau


  * Nestjs社区——分类项目： https://github.com/nestjs/awesome-nestjs?tab=readme-ov-file#examples




  Egg.js > 
    - Controller、Service、Middeware
    【教程】
    - 1、渲染静态资源：配置、渲染、部署
    - 1、MySQL
    - 2、Passport：『登录鉴权』 是一个常见的业务场景，包括『账号密码登录方式』和『第三方统一登录』。
    - 3、实现RESTful API
    - 3、Socket.io
    - 3、Typescript
    
    【核心教程】
    - 1、本地开发
    - 1、日志
    - 1、HttpClient
    - 1、Cookie与Session： 设置用户Session： https://www.eggjs.org/zh-CN/core/cookie-and-session#session-%E5%AE%9E%E8%B7%B5
    - 1、多进程模型和进程间通讯
    - 1、异常处理
    - 1、安全
    - 1、国际化

    【基础功能】
    - 1、Config配置   
    - 1、中间件    
    - 1、路由
    - 1、控制器
    - 1、服务
    - 1、插件
    - 1、定时任务
    
    【进阶】
    - 1、加载器Loader
        - 应用、插件和框架三者之间的关系
        - 加载文件顺序：plugin、config、extend、自定义初始化、service、middleware、controller、router
        - 框架提供了以下生命周期函数供开发者使用
        - 拓展Loader：loadPlugin() | loadConfig() ...
    - 1、插件开发：plugin：https://github.com/eggjs/egg-boilerplate-plugin
    - 1、框架开发：团队架构师提供框架定制的能力：统一的技术选型、统一的默认配置、统一的部署方案、统一的代码风格
    - 1、多进程研发模式增强：
    - 1、View 插件开发
    - 1、升级你的生命周期事件函数
